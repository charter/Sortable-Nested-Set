h3. Sortable Nested Set for Rails 3.1.rc6

Dreaming about Drag and Drop for Nested Sets? It's should be with JQuery?
Here's the solution!

*There is _almost_ production solution for you web site!* Just try!


Мечтаете о Драг & Дроп решении для перестроения вложенных деревьев на своем сайте?
Решение должно быть на основе JQuery?
Просто попробуйте! Кажется это то, что надо! Вероятно, можно даже использовать в продакшене!

h3. TODO

# makes english better
# remove ans_tree helper with something else (maybe)

Server side:

# ruby 1.8.x or ruby 1.9.x
# Rails 3.1 rc6
# Nested Set Gem

Client side:

# JQuery 1.6 +
# jQuery UI Nested Sortable (Manuele J Sarfatti)
# piece of Ajax code

h3. Installing

# cd ~
# git clone git@github.com:the-teacher/Sortable-Nested-Set.git
# cd Sortable-Nested-Set/
# bundle install

*config/database.yml*

<pre>
  development:
    adapter: mysql2
    database: sortable_nested_set_dev
    host: localhost
    username: root
    password: qwerty
    encoding: utf8
    timeout: 5000

  production:
    adapter: mysql2
    database: sortable_nested_set_pro
    host: localhost
    username: root
    password: qwerty
    encoding: utf8
    timeout: 5000
</pre>


# rake app:create
# rails s

*Browser: localhost:3000*

External links

# jQuery UI Nested Sortable "http://mjsarfatti.com/sandbox/nestedSortable/":http://mjsarfatti.com/sandbox/nestedSortable/
# Rails 3 Nested Set Gem "https://github.com/skyeagle/nested_set":https://github.com/skyeagle/nested_set

h2. Understanding

We have an objects. This application uses the pages (Page Model).
Page Model include nested_set functionality (gem nested_set).

*models/page.rb*

<pre>
class Page < ActiveRecord::Base
  acts_as_nested_set

  scope :nested_set,          order('lft ASC')
  scope :reversed_nested_set, order('lft DESC')

end
</pre>

We get a lot of pages

*controllers/pages_controller.rb*

<pre>
class PagesController < ApplicationController
  def index
    @pages = Page.nested_set.all
  end
end
</pre>

We rendering pages with *ans_tree* helper

*views/pages/index.haml*

<pre>
%ol.sortable.ui-sortable.nested_set#nested_set
  = raw ans_tree(@pages, :path=>'pages/nested_set', :admin=>true, :class_name=>'Page', :id_field=>:id)
</pre>

*ans_tree* helper uses partials from *views/pages/nested_set*

* _create_root.haml - for render create button
* _link.haml - link to edit current node
* _controls.haml - rendering control buttons - up, down, delete, edit
* _nested_set.haml - HTML tag for containing nested_set (OL or UL or DIV or other)
* _nested_set_item.haml - HTML tag for rendering node (LI or DIV or other)

*ans_tree* helper - is simple recursive  method for rendering nested_set (sorry, i wrote it myself)
*ans_tree* helper is here app/helpers/ans_helper.rb

After rendering we are have pages#index page.

<pre>
= javascript_include_tag 'jquery-1.6.2.min'
= javascript_include_tag 'jquery_ujs'
= javascript_include_tag 'jquery-ui-1.8.11.custom.min'
= javascript_include_tag 'jquery.ui.nestedSortable'

= stylesheet_link_tag 'reset'
= stylesheet_link_tag 'nested_set/style'
= csrf_meta_tag

:javascript

  // INIT Nested Sortable (Manuele J Sarfatti)
  $(document).ready(function(){
    $('ol.sortable').nestedSortable({
      disableNesting: 'no-nest',
      forcePlaceholderSize: true,
      handle: 'div.handle',
      helper:	'clone',
      items: 'li',
      maxLevels: 5,
      opacity: .6,
      placeholder: 'placeholder',
      revert: 250,
      tabSize: 25,
      tolerance: 'pointer',
      toleranceElement: '> div'
    })

    // DEFINE AJAX function
    function send_nested_sets_new_structure(item_id, parent_id, prev_id, next_id){
      jQuery.ajax({
        type: 'POST',
        url: '#{restructure_pages_url}',
        data: {node_id: item_id, parent_id: parent_id, prev_id: prev_id, next_id: next_id, authenticity_token: '#{form_authenticity_token}' },
        dataType: 'script',
        beforeSend: function(xhr){},
        error: function(xhr, status, error){alert(error);}
      });//jQuery.ajax
    }

    //SEND AJAX on UPDATE
    $('ol.sortable').sortable({
      update: function(event, ui){
        // ITEM ID
        item_id = ui.item.attr('id');
        // PARENT ID
        parent_id = ui.item.parent().attr('id');
        if(typeof(parent_id) == 'undefined'){
          parent_id = ui.item.parent().parent().attr('id');
        }
        $('#parent').html(parent_id);
        // PREV ID
        prev_id = ui.item.prev().attr('id');
        // NEXT ID
        next_id = ui.item.next().attr('id');

        send_nested_sets_new_structure(item_id, parent_id, prev_id, next_id);
      }
    });
  });
</pre>

Ajax request send ids of current node, siblings and parent:

<pre>
  node_id: item_id,
  parent_id: parent_id,
  prev_id: prev_id,
  next_id: next_id 
</pre>

Params come to *restructure_pages_url* => pages#restructure

<pre>

  def restructure
    node_id   = params[:node_id].to_i
    parent_id = params[:parent_id].to_i
    prev_id   = params[:prev_id].to_i
    next_id   = params[:next_id].to_i

    return :text=>"alert('do nothing');" if parent_id.zero? && prev_id.zero? && next_id.zero?

    if prev_id.zero? && next_id.zero?
      Page.find(node_id).move_to_child_of Page.find(parent_id)
    elsif !prev_id.zero?
      Page.find(node_id).move_to_right_of Page.find(prev_id)
    elsif !next_id.zero?
      Page.find(node_id).move_to_left_of Page.find(next_id)
    end

    render(:nothing=>true)
  end

</pre>

h3. Attention!

if you want to use reversed_nested_set scope (see Model)
you should *remove* *move_to_right_of* with *move_to_left_of*
and *remove* *move_to_right_of* with *move_to_left_of*

<pre>
class PagesController < ApplicationController
  def index
    @pages = Page.reversed_nested_set.all
  end
end
</pre>

Change pages#restructure to this:

<pre>

  def restructure
    node_id   = params[:node_id].to_i
    parent_id = params[:parent_id].to_i
    prev_id   = params[:prev_id].to_i
    next_id   = params[:next_id].to_i

    return :text=>"alert('do nothing');" if parent_id.zero? && prev_id.zero? && next_id.zero?

    if prev_id.zero? && next_id.zero?
      Page.find(node_id).move_to_child_of Page.find(parent_id)
    elsif !prev_id.zero?
      Page.find(node_id).move_to_left_of Page.find(prev_id)
    elsif !next_id.zero?
      Page.find(node_id).move_to_right_of Page.find(next_id)
    end

    render(:nothing=>true)
  end

</pre>

h3. Acknowledgments

"Iconza":http://iconza.com/ for free icons for this application

*The MIT License*

Copyright (c) 2011 github.com/the-teacher

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Copyright (c) 2011 github.com/the-teacher

Данная лицензия разрешает лицам, получившим копию данного программного обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное Обеспечение»), безвозмездно использовать Программное Обеспечение без ограничений, включая неограниченное право на использование, копирование, изменение, добавление, публикацию, распространение, сублицензирование и/или продажу копий Программного Обеспечения, также как и лицам, которым предоставляется данное Программное Обеспечение, при соблюдении следующих условий:

Указанное выше уведомление об авторском праве и данные условия должны быть включены во все копии или значимые части данного Программного Обеспечения.

ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.





